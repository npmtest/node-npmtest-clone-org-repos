{"/home/travis/build/npmtest/node-npmtest-clone-org-repos/test.js":"/* istanbul instrument in package npmtest_clone_org_repos */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-clone-org-repos/lib.npmtest_clone_org_repos.js":"/* istanbul instrument in package npmtest_clone_org_repos */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_clone_org_repos = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_clone_org_repos = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-clone-org-repos/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-clone-org-repos && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_clone_org_repos */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_clone_org_repos\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_clone_org_repos.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_clone_org_repos.rollup.js'] =\n            local.assetsDict['/assets.npmtest_clone_org_repos.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_clone_org_repos.__dirname + '/lib.npmtest_clone_org_repos.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-clone-org-repos/node_modules/clone-org-repos/index.js":"var cli = require('cli').enable('help', 'status', 'version')\n    , github = require('./lib/github')\n    , optionsValidator = require('./lib/options_validator')\n    , prompt = require('prompt').start();\n\nvar merge = require('merge'), original, cloned;\n\ncli.setApp(__dirname + '/package.json');\n\ncli.parse({\n    perpage:  ['p', 'number of repos per page', 'number', 100],\n    type: ['t', 'can be one of: all, public, private, forks, sources, member', 'string', 'all'],\n    exclude: ['e', 'Exclude passed repos, comma separated', 'string'],\n    only: ['o', 'Only clone passed repos, comma separated', 'string'],\n    regexp: ['r', 'If true, exclude or only option will be evaluated as a regexp', 'boolean', false],\n    username: ['u', 'Username for basic authentication. Required to access github api', 'string'],\n    token: ['token', 'Token authentication. Required to access github api', 'string'],\n    gitaccess: ['a', 'GitHub access protocol: git, ssh or https', 'string', 'ssh'],\n    gitsettings: ['s', 'Additional git options to pass to git clone command', 'string', '']\n});\n\ngetRepositories = function(args, options) {\n    var gitOptions = merge(options, { organization: args[0] });\n    var organization = new github.Organization(gitOptions);\n\n    var validatorResult = optionsValidator.execute(gitOptions);\n\n    if (validatorResult.valid) {\n        var callback = function(err, success) {\n            if (err) {\n                cli.info('error executing request ', err);\n            } else {\n                if (this.currentPage <= this.getLastPage()) {\n                    this.getRepositories(callback);\n                }\n            }\n        }\n\n        organization.getRepositories(callback);\n    } else {\n        cli.error(validatorResult.message);\n    }\n};\n\ncli.main(function(args, options) {\n    var token = process.env.GITHUB_TOKEN || options.token;\n\n    if (token) {\n        if (!options.token) {\n            options = merge(options, { token: token });\n        }\n\n        getRepositories(args, options);\n    } else {\n        prompt.get([{\n            name: 'password',\n            hidden: true,\n            required: true\n        }], function(err, result) {\n            getRepositories(args, merge(options, result));\n        });\n    }\n});","/home/travis/build/npmtest/node-npmtest-clone-org-repos/node_modules/clone-org-repos/lib/github.js":"var spawn = require('child_process').spawn\n    , cli = require('cli').enable('help', 'status', 'version')\n    , request = require('request').defaults({ jar: true });\n\nvar github = exports;\n\nfunction Organization(options) {\n    this.BASE_URI = 'https://api.github.com/orgs/';\n    this.currentPage = 1;\n    this.organization = options.organization;\n    this.perpage = parseInt(options.perpage);\n    this.username = options.username;\n    this.password = options.password;\n    this.token = options.token;\n    this.regexp = options.regexp;\n    this.gitaccess = options.gitaccess;\n    this.gitsettings = options.gitsettings;\n\n    if (options.only && options.regexp) {\n        this.only = new RegExp(options.only);\n    } else if (options.only) {\n        this.only = options.only.split(',');\n    }\n\n    if (options.exclude && options.regexp) {\n        this.exclude = new RegExp(options.exclude);\n    } else if (options.exclude) {\n        this.exclude = options.exclude.split(',');\n    }\n\n    this.type = options.type;\n    this.nextPageUrl = this.getRequestUri();\n}\n\nOrganization.prototype.getRequestUri = function() {\n    return this.BASE_URI + this.organization + '/repos' + '?per_page=' + this.perpage + '&type=' + this.type;\n}\n\nOrganization.prototype.getLastPage = function() {\n    return this.lastPage || 1;\n}\n\nOrganization.prototype.getRepositories = function(callback) {\n    var options = {\n        url: this.nextPageUrl,\n        headers: {\n            'User-Agent': 'request'\n        },\n        json: true\n    };\n\n    if (this.token) {\n        options.headers['Authorization'] = 'token ' + this.token;\n    } else {\n        options['auth'] = {\n          'user': this.username,\n          'pass': this.password,\n          'sendImmediately': true\n        };\n    }\n\n    cli.info('Requesting github repositories for ' + this.organization + ' with url ' + options.url + ' ...');\n\n    request.get(options, function (error, response, body) {\n\n        if (error) {\n            cli.error(error);\n            callback.call(this, error);\n        } else {\n            cli.debug('current page ' + this.currentPage);\n            this.parseLinks(response);\n            this.currentPage++;\n            cli.debug('next page ' + this.nextPageUrl);\n            cli.debug('last page ' + this.getLastPage());\n\n            for (var i = 0; i < body.length; i++) {\n                this.clone(body[i]);\n            }\n\n            callback.call(this, null, { sucess: true });\n        }\n    }.bind(this));\n}\n\nOrganization.prototype.parseLinks = function(response) {\n    if (response.headers.link) {\n        var paginationLinks = {};\n        var links = response.headers.link.split(',')\n\n        for (var i = 0; i < links.length; i++) {\n            var section = links[i].split(';');\n            var url = section[0].replace(/<(.*)>/, '$1').trim();\n            var name = section[1].replace(/rel=\"(.*)\"/, '$1').trim();\n\n            if (name == 'last') {\n                var lastPage = section[0].match(/&page=(.*)/)[1].replace('>', '');\n                this.lastPage = parseInt(lastPage);\n            }\n            paginationLinks[name] = url;\n        }\n\n        this.nextPageUrl = paginationLinks['next'];\n        cli.debug('nextPageUrl ' + this.nextPageUrl);\n    }\n}\n\nOrganization.prototype.clone = function(repo) {\n    if (this.exclude && this.regexp && repo.name.match(this.exclude)) {\n        return cli.debug('Repository ' + repo.name + ' ignored, exclude option: ' + this.exclude);\n    } else if (this.exclude && !this.regexp && this.exclude.indexOf(repo.name) != -1) {\n        return cli.debug('Repository ' + repo.name + ' ignored, exclude option: ' + this.exclude);\n    } else if (this.only && this.regexp && !repo.name.match(this.only)) {\n        cli.debug('Repository ' + repo.name + ' ignored, only option: ' + this.only);\n    } else if (this.only && !this.regexp && this.only.indexOf(repo.name) == -1) {\n        return cli.debug('Repository ' + repo.name + ' ignored, only option: ' + this.only);\n    } else {\n        this.executeCloneCommand(repo);\n    }\n}\n\nOrganization.prototype.getCloneUrl = function(repo) {\n    var url;\n    switch (this.gitaccess) {\n        case 'ssh':\n            url = repo.ssh_url;\n            break;\n        case 'git':\n            url = repo.git_url;\n            break;\n        case 'https':\n            url = repo.clone_url;\n            break;\n        default:\n            return cli.error ( 'Unknown git access protocol provided: ' + this.gitaccess );\n    }\n\n    return url;\n}\n\nOrganization.prototype.executeCloneCommand = function(repo) {\n    var url = this.getCloneUrl(repo);\n\n    var spawnParams = ['clone'].concat(this.gitsettings || [], url);\n    cli.info('cloning ' + url);\n\n    var process = spawn('git', spawnParams);\n\n    process.on('close', function(status) {\n        if (status == 0) {\n            cli.info('success cloning ' + url);\n        } else {\n            cli.error('git clone failed with status ' + status + ' on ' + url);\n        }\n    });\n}\n\nmodule.exports = github;\ngithub.Organization = Organization;\n","/home/travis/build/npmtest/node-npmtest-clone-org-repos/node_modules/clone-org-repos/lib/options_validator.js":"var optionsValidator = exports;\n\noptionsValidator.execute = function(options) {\n    result = {};\n    perPageResult = {};\n    typeResult = {};\n\n    if (options.perpage) {\n        perPageResult = this.validatePerPage(options.perpage);\n    }\n\n    if (options.type) {\n        typeResult = this.validateType(options.type);\n    }\n\n    excludeOnlyResult = this.validateExcludeAndOnly(options.exclude, options.only);\n\n    passwordResult = this.validatePassword(options);\n\n    result.valid = !!(perPageResult.valid && typeResult.valid && excludeOnlyResult.valid && passwordResult.valid);\n    result.message = [perPageResult.message, typeResult.message, excludeOnlyResult.message, passwordResult.message].join(' ');\n\n    return result;\n}\n\noptionsValidator.validatePassword = function(options) {\n    result = {};\n    result.valid = !!(options.token || options.password);\n\n    if (!result.valid) {\n        result.message = 'Please provide an password';\n    }\n\n    return result;\n}\n\noptionsValidator.validateExcludeAndOnly = function(exclude, only) {\n    result = {};\n    result.valid = !!(exclude == null || only == null);\n\n    if (!result.valid) {\n        result.message = 'Exclude and only options passed. Please pass just one of them.';\n    }\n\n    return result;\n}\n\noptionsValidator.validatePerPage = function(perpage) {\n    result = {};\n    result.valid = !isNaN(perpage);\n\n    if (!result.valid) {\n        result.message = perpage + ' is not a number';\n    }\n\n    return result;\n}\n\noptionsValidator.validateType = function(type) {\n    validTypes = ['all', 'public', 'private', 'forks', 'sources', 'member'];\n    result = {};\n    result.valid = validTypes.indexOf(type) != -1;\n\n    if (!result.valid) {\n        result.message = type + ' is not a valid type. Should be any of: ' + validTypes.join(', ');\n    }\n\n    return result;\n}\n\nmodule.exports = optionsValidator;"}